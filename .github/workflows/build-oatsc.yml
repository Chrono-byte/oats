---
name: Build and Publish Oats Compiler
on:
  push:
    branches:
      - master
    paths:
      - crates/oatsc/**
      - .github/workflows/build-oatsc.yml
  pull_request:
    branches:
      - master
    paths:
      - crates/oatsc/**
      - .github/workflows/build-oatsc.yml
env:
  CARGO_TERM_COLOR: "always"
jobs:
  build-oatsc-linux:
    name: Build Oats Compiler (Linux)
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            artifact: oatsc-linux-x86_64
          # - target: aarch64-unknown-linux-gnu
          # artifact: oatsc-linux-aarch64
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu g++-aarch64-linux-gnu libffi-dev:arm64 llvm-18-dev:arm64

      - name: Install LLVM (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-18-dev clang-18 libclang-18-dev
          echo "LLVM_SYS_181_PREFIX=/usr/lib/llvm-18" >> $GITHUB_ENV
          echo "/usr/lib/llvm-18/bin" >> $GITHUB_PATH

      - name: Create Cargo config for aarch64 linker
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p .cargo
          printf '%s\n' \
            '[target.aarch64-unknown-linux-gnu]' \
            'linker = "aarch64-linux-gnu-gcc"' \
            > .cargo/config.toml

      - name: Build oatsc
        run: |
          cargo build --release --bin oatsc --target ${{ matrix.target }}

      - name: Rename artifact
        run: |
          cp target/${{ matrix.target }}/release/oatsc ${{ matrix.artifact }}

      - name: Make executable (Unix)
        run: chmod +x ${{ matrix.artifact }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}
          retention-days: 90

  build-oatsc-mac:
    name: Build Oats Compiler (macOS)
    strategy:
      matrix:
        include:
          - os: macos-14
            target: aarch64-apple-darwin
            artifact: oatsc-macos-aarch64
          - os: macos-13
            target: x86_64-apple-darwin
            artifact: oatsc-macos-x86_64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install LLVM (macOS)
        run: |
          brew install llvm@18
          if [ "$(uname -m)" = "arm64" ]; then
            LLVM_PREFIX="/opt/homebrew/opt/llvm@18"
          else
            LLVM_PREFIX="/usr/local/opt/llvm@18"
          fi
          echo "LLVM_SYS_181_PREFIX=$LLVM_PREFIX" >> $GITHUB_ENV
          echo "$LLVM_PREFIX/bin" >> $GITHUB_PATH

      - name: Build oatsc
        run: |
          cargo build --release --bin oatsc --target ${{ matrix.target }}

      - name: Rename artifact
        run: |
          cp target/${{ matrix.target }}/release/oatsc ${{ matrix.artifact }}

      - name: Make executable (Unix)
        run: chmod +x ${{ matrix.artifact }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}
          retention-days: 90

  # build-oatsc-windows:
  #   name: Build Oats Compiler (Windows)
  #   runs-on: windows-2022
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Install Rust toolchain
  #       uses: actions-rust-lang/setup-rust-toolchain@v1
  #       with:
  #         toolchain: stable
  #         targets: x86_64-pc-windows-msvc

  #     - name: Cache Cargo dependencies
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-

  #     - name: Install LLVM (Windows)
  #       shell: powershell
  #       run: |
  #         choco install llvm --version 18.1.8 --allow-downgrade
  #         Add-Content -Path $env:GITHUB_ENV -Value 'LLVM_SYS_181_PREFIX=C:\Program Files\LLVM'
  #         Add-Content -Path $env:GITHUB_PATH -Value 'C:\Program Files\LLVM\bin'

  #     - name: Build oatsc
  #       run: |
  #         cargo build --release --bin oatsc --target x86_64-pc-windows-msvc

  #     - name: Rename artifact
  #       shell: powershell
  #       run: |
  #         $src = "target/x86_64-pc-windows-msvc/release/oatsc.exe"
  #         Copy-Item -Path $src -Destination "oatsc-windows-x86_64.exe" -Force

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: oatsc-windows-x86_64.exe
  #         path: oatsc-windows-x86_64.exe
  #         retention-days: 90

  create-release:
    name: Create Compiler Release
    needs:
      - build-oatsc-linux
      - build-oatsc-mac
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate version tag
        id: version
        run: |
          echo "tag=compiler-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "date=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Create Release and upload assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ steps.version.outputs.tag }}" \
            --title "Compiler Build ${{ steps.version.outputs.date }}" \
            --notes "Automated oatsc compiler build from commit ${{ github.sha }}" \
            artifacts/*
