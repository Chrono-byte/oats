name: Build and Publish Runtime

on:
  push:
    branches:
      - master
    paths:
      - "crates/runtime/**"
      - ".github/workflows/build-runtime.yml"
  pull_request:
    branches:
      - master
    paths:
      - "crates/runtime/**"
      - ".github/workflows/build-runtime.yml"
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-runtime:
    name: Build Runtime
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            artifact: libruntime-linux-x86_64.a
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Install sccache
        run: |
          cargo install sccache
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "SCCACHE_DIR=~/.cache/sccache" >> $GITHUB_ENV

      - name: Cache sccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: sccache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-${{ runner.os }}-

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build runtime
        run: |
          cd crates/runtime
          cargo build --release --target ${{ matrix.target }}

      - name: Rename artifact
        run: cp target/${{ matrix.target }}/release/libruntime.a ${{ matrix.artifact }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}
          retention-days: 90

  create-release:
    name: Create Release
    needs: build-runtime
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate version tag
        id: version
        run: |
          echo "tag=runtime-nightly" >> $GITHUB_OUTPUT
          echo "title=Runtime Nightly Build $(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          echo "notes=Automated nightly runtime build from commit ${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "date=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release delete runtime-nightly --yes || true
          gh release create "${{ steps.version.outputs.tag }}" \
            --title "${{ steps.version.outputs.title }}" \
            --notes "${{ steps.version.outputs.notes }}" \
            --prerelease \
            artifacts/**/*.a
