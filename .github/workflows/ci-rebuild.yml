name: CI (rebuild)

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]

concurrency:
    group: ci-${{ github.ref }}
    # Don't cancel in-progress runs automatically; cancelling causes the runner
    # to exit early (you'll see "Error: The operation was canceled." and the
    # post-checkout cleanup steps run). Set to `true` only if you want newer
    # pushes to cancel older runs to save CI minutes.
    cancel-in-progress: false

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                rust: [stable]
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Start cancellation debug agent
              run: |
                  # Create a tiny background agent that logs TERM/INT signals so we can
                  # inspect whether the runner received a cancel signal and when.
                  mkdir -p "$GITHUB_WORKSPACE/.github"
                  cat > "$GITHUB_WORKSPACE/.github/debug_agent.sh" <<'EOF'
                  #!/usr/bin/env bash
                  LOG="$GITHUB_WORKSPACE/.github/debug_agent.log"
                  echo "debug agent start: $$ $(date)" >> "$LOG"
                  trap 'echo "trapped signal at $(date) pid $$" >> "$LOG"; exit' TERM INT
                  # Keep looping so the agent can detect signals during the job lifetime
                  while true; do sleep 1; done
                  EOF
                  chmod +x "$GITHUB_WORKSPACE/.github/debug_agent.sh"
                  nohup "$GITHUB_WORKSPACE/.github/debug_agent.sh" > "$GITHUB_WORKSPACE/.github/debug_agent.out" 2>&1 &
                  echo $! > "$GITHUB_WORKSPACE/.github/debug_agent.pid"
              shell: bash

            - name: Cache cargo registry and target
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry
                      ~/.cargo/git
                      target
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: ${{ matrix.rust }}
                  override: true

            - name: Install LLVM-18 and Clang
              run: |
                  sudo apt-get update
                  sudo apt-get install -y llvm-18 llvm-18-dev clang-18 pkg-config

            - name: Configure LLVM env
              run: |
                  echo "LLVM_SYS_181_PREFIX=/usr/lib/llvm-18" >> $GITHUB_ENV
                  echo "LD_LIBRARY_PATH=/usr/lib/llvm-18/lib" >> $GITHUB_ENV
                  echo "/usr/lib/llvm-18/bin" >> $GITHUB_PATH

            - name: Show llvm-config
              run: |
                  llvm-config-18 --version || llvm-config --version || true

            - name: Build and run tests
              env:
                  LLVM_SYS_181_PREFIX: ${{ env.LLVM_SYS_181_PREFIX }}
              run: |
                  cargo test --workspace --verbose

            - name: Generate IR artifact (out.ll)
              if: success()
              run: |
                  # Try to source the helper script if present (keeps parity with local dev)
                  . ./scripts/setup_env.sh || true
                  cargo build -p oats --quiet
                  OATS_SRC_FILE="examples/add.oats" cargo run -p oats --bin aot_run -- examples/add.oats > out.ll

            - name: Upload IR artifact
              if: success()
              uses: actions/upload-artifact@v4
              with:
                  name: oats-ir
                  path: out.ll

            - name: Upload debug log (always)
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: ci-debug-log
                  path: .github/debug_agent.log
