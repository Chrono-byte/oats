export class Node {
    name: string;
    parent: Node | null;
    child: Node | null;

    constructor(name: string) {
        this.name = name;
        this.parent = null;
        this.child = null;
    }
}

export function makeCycle(): void {
    let a: Node = new Node("A");
    let b: Node = new Node("B");

    a.child = b; // a -> b
    b.parent = a; // b -> a

    // At function end, both `a` and `b` go out of scope and ARC leaves a cycle.
}

export function main(): number {
    makeCycle();

    // enqueue a small test object for the collector to inspect
    collector_test_enqueue();

    // Give runtime background collector a moment to run in case it's scheduled
    // (this example runs as a process; collector logs appear in runtime stderr)
    sleep_ms(5000.0);

    println("All done!");

    return 0;
}
